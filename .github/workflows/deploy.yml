name: 构建并部署到腾讯云

on:
  push:
    branches:
      - main

# 定义环境变量
env:
  TCR_REGISTRY: ${{ secrets.TCR_REGISTRY }}
  IMAGE_NAME: evolve-common-api
  API_URL: ${{ secrets.API_URL || 'http://localhost:8000' }}

jobs:
  build-and-push:
    name: 构建并推送镜像
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 提取版本号
        id: get_version
        run: |
          VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "提取的版本号: $VERSION"

      - name: 登录腾讯容器镜像服务
        uses: docker/login-action@v3
        with:
          registry: ${{ env.TCR_REGISTRY }}
          username: ${{ secrets.TCR_USERNAME }}
          password: ${{ secrets.TCR_PASSWORD }}

      # 使用GitHub Actions的缓存机制
      - name: 设置Docker构建缓存
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 构建并推送Docker镜像
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ env.VERSION }}

      # 更新缓存
      - name: 移动缓存
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: 部署到腾讯云服务器
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: 部署到腾讯云服务器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 20m
          script: |
            set -e
            cd ~/${{ secrets.CVM_USERNAME }}/evolve-common
            
            # 确保必要的环境变量存在
            if [ -z "${{ secrets.TCR_REGISTRY }}" ] || [ -z "${{ secrets.TCR_USERNAME }}" ] || [ -z "${{ secrets.TCR_PASSWORD }}" ]; then
              echo "错误: 缺少容器镜像服务相关密钥"
              exit 1
            fi
            
            # 登录容器镜像服务
            echo "${{ secrets.TCR_PASSWORD }}" | docker login ${{ secrets.TCR_REGISTRY }} -u ${{ secrets.TCR_USERNAME }} --password-stdin
            
            # 从本地文件获取版本信息
            if [ -f pyproject.toml ]; then
              export VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
              echo "本地pyproject.toml中的版本: $VERSION"
            else
              export VERSION="latest"
              echo "警告: 未找到pyproject.toml，使用'latest'作为版本"
            fi
            
            # 设置环境变量
            export TCR_REGISTRY=${{ secrets.TCR_REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export IMAGE_TAG=$VERSION
            
            # 拉取新镜像并重启服务
            echo "拉取新镜像..."
            docker-compose pull api
            
            # 显示镜像信息
            echo "可用镜像:"
            docker images | grep ${IMAGE_NAME}
            
            # 停止并重启服务
            echo "重启服务..."
            docker-compose down
            docker-compose up -d
            
            # 检查容器状态
            docker-compose ps
            
            # 等待服务准备就绪
            echo "等待API服务就绪..."
            timeout=90
            while [ $timeout -gt 0 ]; do
              if docker-compose exec -T api curl -s http://localhost:8000/health > /dev/null; then
                echo "API服务已就绪!"
                break
              fi
              echo "等待API就绪... (剩余 $timeout 秒)"
              if ! docker-compose ps | grep api | grep -q "Up"; then
                echo "错误: API容器未运行! 容器日志:"
                docker-compose logs api
                exit 1
              fi
              sleep 5
              timeout=$((timeout-5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "警告: API服务未在超时时间内就绪"
              docker-compose logs api
            fi
            
            # 运行数据库迁移
            echo "运行数据库迁移..."
            if ! docker-compose exec -T api alembic upgrade head; then
              echo "错误: 数据库迁移失败!"
              exit 1
            fi
            
            echo "部署成功完成! 版本: $VERSION"
      
      # 等待服务启动
      - name: 等待服务启动
        run: sleep 15
      
      # 检查服务健康状态
      - name: 检查服务健康状态
        id: health_check
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.API_URL }}/health
          method: 'GET'
          timeout: 15000
      
      # 显示健康检查结果
      - name: 显示健康检查结果
        run: |
          echo "健康检查状态: ${{ fromJson(steps.health_check.outputs.response).status }}"
          echo "数据库状态: ${{ fromJson(steps.health_check.outputs.response).database }}"
          echo "服务版本: ${{ fromJson(steps.health_check.outputs.response).version }}"
          
          if [ "${{ fromJson(steps.health_check.outputs.response).status }}" != "healthy" ]; then
            echo "::warning::服务健康检查返回非健康状态: ${{ fromJson(steps.health_check.outputs.response).status }}"
          else
            echo "::notice::服务健康且运行版本 ${{ fromJson(steps.health_check.outputs.response).version }}" 
          fi 