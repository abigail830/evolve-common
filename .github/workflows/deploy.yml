name: 构建并部署到腾讯云

on:
  push:
    branches:
      - main

# 定义环境变量
env:
  TCR_REGISTRY: ${{ secrets.TCR_REGISTRY }}
  IMAGE_NAME: evolve-common-api
  API_URL: ${{ secrets.API_URL || 'http://localhost:8000' }}

jobs:
  build-and-push:
    name: 构建并推送镜像
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest

      - name: 提取版本号
        id: get_version
        run: |
          VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "提取的版本号: $VERSION"

      - name: 登录腾讯容器镜像服务
        uses: docker/login-action@v3
        with:
          registry: ${{ env.TCR_REGISTRY }}
          username: ${{ secrets.TCR_USERNAME }}
          password: ${{ secrets.TCR_PASSWORD }}

      - name: 构建并推送Docker镜像
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ env.VERSION }}
          outputs: type=image,compression=gzip
          provenance: false

      # 添加构建后检查步骤
      - name: 构建结果检查
        if: always()
        run: |
          echo "构建结果: ${{ steps.build-and-push.outcome }}"
          echo "构建详情: ${{ steps.build-and-push.outputs }}"
          docker images

      # 添加网络测试步骤
      - name: 网络连接测试
        run: |
          echo "测试与腾讯云容器镜像服务的连接..."
          ping -c 3 ${{ env.TCR_REGISTRY }} || true
          curl -I https://${{ env.TCR_REGISTRY }} || true

  deploy:
    name: 部署到腾讯云服务器
    needs: build-and-push
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: 部署到腾讯云服务器
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 20m
          script: |
            set -e
            mkdir -p ~/${{ secrets.CVM_USERNAME }}/evolve-common
            cd ~/${{ secrets.CVM_USERNAME }}/evolve-common
            
            # 创建docker-compose.yml文件，以最简单的方式
            echo "version: '3'" > docker-compose.yml
            echo "services:" >> docker-compose.yml
            echo "  api:" >> docker-compose.yml
            echo "    image: \${TCR_REGISTRY}/\${IMAGE_NAME}:\${IMAGE_TAG}" >> docker-compose.yml
            echo "    ports:" >> docker-compose.yml
            echo "      - \"8000:8000\"" >> docker-compose.yml
            
            # 确保必要的环境变量存在
            if [ -z "${{ secrets.TCR_REGISTRY }}" ] || [ -z "${{ secrets.TCR_USERNAME }}" ] || [ -z "${{ secrets.TCR_PASSWORD }}" ]; then
              echo "错误: 缺少容器镜像服务相关密钥"
              exit 1
            fi
            
            # 登录容器镜像服务
            echo "${{ secrets.TCR_PASSWORD }}" | docker login ${{ secrets.TCR_REGISTRY }} -u ${{ secrets.TCR_USERNAME }} --password-stdin
            
            # 从本地文件获取版本信息
            if [ -f pyproject.toml ]; then
              export VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
              echo "本地pyproject.toml中的版本: $VERSION"
            else
              export VERSION="latest"
              echo "警告: 未找到pyproject.toml，使用'latest'作为版本"
            fi
            
            # 设置环境变量
            export TCR_REGISTRY=${{ secrets.TCR_REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export IMAGE_TAG=$VERSION
            
            # 设置 Docker 配置以增加超时时间和使用镜像加速
            mkdir -p /etc/docker
            cat > /etc/docker/daemon.json << 'EOL'
            {
              "registry-mirrors": ["https://mirror.ccs.tencentyun.com"],
              "max-concurrent-downloads": 10,
              "log-driver": "json-file",
              "log-opts": {
                "max-size": "100m"
              }
            }
            EOL
            
            # 重启 Docker 以应用新配置
            systemctl restart docker || service docker restart
            
            # 拉取新镜像并重启服务
            echo "拉取新镜像..."
            export COMPOSE_HTTP_TIMEOUT=300
            docker-compose pull api --no-cache || true
            
            # 显示镜像信息
            echo "可用镜像:"
            docker images | grep ${IMAGE_NAME}
            
            # 检查是否能连接到腾讯云容器服务
            echo "测试连接到 ${TCR_REGISTRY}..."
            curl -k -m 10 https://${TCR_REGISTRY} || echo "无法连接到镜像仓库，但将继续尝试"
            
            # 停止并重启服务
            echo "重启服务..."
            docker-compose down || true
            docker-compose up -d || true
            
            # 检查容器状态
            echo "查看容器状态..."
            docker-compose ps || true
            
            # 等待几秒钟让服务启动
            echo "等待服务启动..."
            sleep 30
            
            # 简单检查服务是否在运行
            echo "检查服务是否运行..."
            if docker-compose ps | grep -q api; then
              echo "API服务已启动!"
            else
              echo "警告: API服务可能未正确启动"
              docker-compose logs api || true
            fi
            
            echo "部署完成!"
      
      # 等待服务启动
      - name: 等待服务启动
        run: sleep 15
      
      # 简单检查服务状态
      - name: 检查API服务
        run: |
          echo "检查API服务状态..."
          curl -s ${{ env.API_URL }}/health || echo "警告: 无法连接到API服务" 