name: Build and Deploy to Tencent Cloud CVM

on:
  push:
    branches:
      - main

# Define environment variables used across jobs
env:
  TCR_REGISTRY: ${{ secrets.TCR_REGISTRY }}
  IMAGE_NAME: evolve-common-api

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 增加超时时间
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Tencent Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.TCR_REGISTRY }}
          username: ${{ secrets.TCR_USERNAME }}
          password: ${{ secrets.TCR_PASSWORD }}

      # 添加缓存步骤
      - name: Set up Docker layer caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          # 添加构建参数以提高可见性
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          outputs: type=registry,compression=gzip
          # 添加更多调试信息
          provenance: false
          no-cache: ${{ github.event_name == 'workflow_dispatch' }}
          pull: true

      # 更新缓存
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to CVM
    needs: build-and-push # This job runs only after the build is successful
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 增加超时时间
    steps:
      - name: Deploy to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          script: |
            set -e
            cd /${{ secrets.CVM_USERNAME }}/evolve-common

            # Configure Git to use HTTP/1.1 for stability
            git config --global http.version HTTP/1.1
            
            # Pull the latest docker-compose.yml if it has changed
            git pull origin main

            # Verify that the required secrets are set
            if [ -z "${{ secrets.TCR_REGISTRY }}" ] || [ -z "${{ secrets.TCR_USERNAME }}" ] || [ -z "${{ secrets.TCR_PASSWORD }}" ]; then
              echo "Error: One or more TCR secrets (TCR_REGISTRY, TCR_USERNAME, TCR_PASSWORD) are not set."
              echo "Please add them to your GitHub repository secrets before proceeding."
              exit 1
            fi

            # Log in to Tencent Container Registry on the CVM
            echo "${{ secrets.TCR_PASSWORD }}" | docker login ${{ secrets.TCR_REGISTRY }} -u ${{ secrets.TCR_USERNAME }} --password-stdin
            
            # Export environment variables for docker-compose to use
            export TCR_REGISTRY=${{ secrets.TCR_REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export IMAGE_TAG=${{ github.sha }}

            # Pull the new image and restart services using docker-compose
            docker-compose pull api
            docker-compose up -d --remove-orphans

            # 使用健康检查替代固定等待时间
            echo "Waiting for API service to be healthy..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if docker-compose exec -T api curl -s http://localhost:8000/ > /dev/null; then
                echo "API service is healthy!"
                break
              fi
              echo "Waiting for API to be ready... ($timeout seconds left)"
              sleep 5
              timeout=$((timeout-5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "Warning: API service did not become healthy within timeout"
              # 继续执行，因为有些服务可能不提供健康检查端点
            fi
            
            # 运行数据库迁移，添加错误处理
            echo "Running database migrations..."
            if ! docker-compose exec -T api alembic upgrade head; then
              echo "Error: Database migration failed!"
              exit 1
            fi
            
            echo "Deployment completed successfully!" 