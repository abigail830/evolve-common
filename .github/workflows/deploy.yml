name: 在服务器上构建并部署

on:
  push:
    branches:
      - main

# 定义环境变量
env:
  APP_NAME: evolve-file-processor
  API_URL: ${{ secrets.API_URL || 'http://localhost:8000' }}

jobs:
  deploy-on-server:
    name: 在腾讯云服务器上构建和部署
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        
      - name: 复制Nginx配置文件到服务器
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          source: "nginx/file-processor.conf"
          target: "~/${{ secrets.CVM_USERNAME }}/evolve-file-processor"

      - name: 在服务器上构建和部署
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 30m
          script: |
            set -e
            
            # 1. 创建项目目录并进入
            mkdir -p ~/${{ secrets.CVM_USERNAME }}/evolve-file-processor
            cd ~/${{ secrets.CVM_USERNAME }}/evolve-file-processor
            
            # 2. 初始化git仓库(如果不存在)
            if [ ! -d ".git" ]; then
              git init
              git remote add origin ${{ secrets.GIT_REPO_URL }}
              echo "Git仓库初始化完成"
            else
              echo "Git仓库已存在"
            fi
            
            # 3. 拉取最新代码
            git fetch origin main
            git checkout main
            git pull origin main
            echo "代码已更新到最新版本"
            
            # 4. 检查.env文件是否存在
            if [ ! -f .env ]; then
              echo "错误: 服务器上不存在.env文件！请先创建此文件"
              exit 1
            else
              echo ".env文件已存在，验证配置中..."
              
              # 检查必要配置是否存在（不显示内容）
              if ! grep -q "DATABASE_URL" .env; then
                echo "错误: .env文件缺少DATABASE_URL配置"
                exit 1
              fi
              
              if ! grep -q "POSTGRES_USER" .env; then
                echo "错误: .env文件缺少POSTGRES_USER配置"
                exit 1
              fi
              
              if ! grep -q "POSTGRES_PASSWORD" .env; then
                echo "错误: .env文件缺少POSTGRES_PASSWORD配置"
                exit 1
              fi
              
              if ! grep -q "POSTGRES_DB" .env; then
                echo "错误: .env文件缺少POSTGRES_DB配置"
                exit 1
              fi
              
              # 检查数据库连接是否指向正确的主机名
              if grep "localhost" .env | grep -q "DATABASE_URL"; then
                echo "警告: 发现DATABASE_URL使用localhost，临时修改为db"
                sed -i 's/localhost/db/g' .env
              fi
              
              echo ".env配置验证完成"
            fi
            
            # 5. 确保docker-compose.yml存在
            if [ ! -f docker-compose.yml ]; then
              echo "警告：未找到docker-compose.yml，将使用仓库中的文件"
            fi
            
            # 6. 在本地构建Docker镜像
            echo "在服务器上构建Docker镜像..."
            docker build -t evolve-file-processor:latest .
            
            # 7. 启动服务
            echo "启动服务..."
            export IMAGE_NAME=evolve-file-processor
            export IMAGE_TAG=latest
            docker-compose down --remove-orphans || true
            docker-compose up -d || true
            
            # 8. 检查容器状态
            echo "查看容器状态..."
            docker-compose ps || true
            
            # 9. 等待数据库就绪
            echo "等待数据库就绪..."
            sleep 10
            for i in {1..12}; do
              if docker-compose exec -T db pg_isready -U postgres; then
                echo "数据库已就绪!"
                break
              fi
              echo "等待数据库就绪... 尝试 $i/12"
              sleep 5
            done
            
            # 10. 复制Nginx配置
            echo "复制Nginx配置..."
            sudo cp -f ~/${{ secrets.CVM_USERNAME }}/evolve-file-processor/nginx/file-processor.conf /etc/nginx/conf.d/file-processor.evolving.team.conf
            
            # 11. 确保Certbot已安装
            echo "检查Certbot是否安装..."
            if ! command -v certbot &> /dev/null; then
                echo "安装Certbot..."
                apt-get update
                apt-get install -y certbot python3-certbot-nginx
            fi
            
            # 12. 申请SSL证书
            echo "申请SSL证书..."
            if [ ! -d "/etc/letsencrypt/live/file-processor.evolving.team" ]; then
                certbot --nginx -d file-processor.evolving.team --non-interactive --agree-tos -m admin@evolving.team || echo "证书申请失败，暂时使用HTTP"
            else
                echo "证书已存在"
            fi
            
            # 13. 检查Nginx配置并重新加载
            echo "检查并重新加载Nginx配置..."
            nginx -t && systemctl reload nginx
            
            # 14. 运行数据库迁移
            echo "运行数据库迁移..."
            docker-compose exec -T api alembic upgrade head || echo "数据库迁移失败，请手动检查"
            
            echo "部署完成!"
      
      # 等待服务启动
      - name: 等待服务启动
        run: sleep 15
      
      # 简单检查服务状态
      - name: 检查API服务
        run: |
          echo "检查API服务状态..."
          curl -s ${{ env.API_URL }}/health || echo "警告: 无法连接到API服务" 