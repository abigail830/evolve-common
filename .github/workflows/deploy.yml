name: Build and Deploy to Tencent Cloud CVM

on:
  push:
    branches:
      - main

# Define environment variables used across jobs
env:
  TCR_REGISTRY: ${{ secrets.TCR_REGISTRY }}
  IMAGE_NAME: evolve-common-api
  API_URL: ${{ secrets.API_URL || 'http://localhost:8000' }}  # API 基础 URL
  GITHUB_REPO_SSH: git@github.com:abigail830/evolve-common.git  # 使用 SSH 方式

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 增加超时时间
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      - name: Log in to Tencent Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.TCR_REGISTRY }}
          username: ${{ secrets.TCR_USERNAME }}
          password: ${{ secrets.TCR_PASSWORD }}

      # 添加缓存步骤
      - name: Set up Docker layer caching
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.TCR_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          # 添加构建参数以提高可见性
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            VERSION=${{ env.VERSION }}
          outputs: type=registry,compression=gzip
          # 添加更多调试信息
          provenance: false
          no-cache: ${{ github.event_name == 'workflow_dispatch' }}
          pull: true

      # 更新缓存
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to CVM
    needs: build-and-push # This job runs only after the build is successful
    runs-on: ubuntu-latest
    timeout-minutes: 20  # 增加整体超时时间
    steps:
      # 使用独立的 SSH 密钥用于 GitHub
      - name: Set up SSH keys for GitHub
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      
      # 添加 GitHub 到已知主机
      - name: Add GitHub to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
      
      - name: Deploy to CVM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.CVM_HOST }}
          username: ${{ secrets.CVM_USERNAME }}
          key: ${{ secrets.CVM_SSH_PRIVATE_KEY }}
          command_timeout: 20m  # 增加命令超时时间
          script: |
            set -e
            cd /${{ secrets.CVM_USERNAME }}/evolve-common
            
            # 使用独立的 GitHub SSH 密钥
            # 确保 SSH 代理正在运行
            eval "$(ssh-agent -s)"
            
            # 将 GitHub SSH 密钥添加到 SSH 代理
            echo "${{ secrets.GIT_SSH_PRIVATE_KEY }}" > ~/.ssh/git_key
            chmod 600 ~/.ssh/git_key
            ssh-add ~/.ssh/git_key
            
            # 增强 Git 操作的可靠性
            export GIT_CURL_VERBOSE=1
            export GIT_TRACE=1
            export GIT_SSH_COMMAND="ssh -v -i ~/.ssh/git_key"
            
            # 检查当前远程仓库 URL
            CURRENT_REMOTE=$(git remote -v | grep origin | head -n 1 | awk '{print $2}')
            echo "Current remote: $CURRENT_REMOTE"
            
            # 如果不是 SSH URL，则更改为 SSH
            if [[ $CURRENT_REMOTE != git@github.com:* ]]; then
              echo "Changing remote URL to SSH..."
              git remote set-url origin ${{ env.GITHUB_REPO_SSH }}
            fi
            
            # 尝试拉取最新代码，使用 SSH 方式
            echo "Pulling latest code from GitHub using SSH..."
            git fetch origin main || echo "Warning: Failed to fetch from GitHub, continuing with existing code"
            git reset --hard origin/main || echo "Warning: Failed to reset to origin/main, continuing with existing code"
            
            # 清理临时密钥文件
            rm -f ~/.ssh/git_key
            
            # 从本地文件获取版本信息，不依赖于 GitHub
            if [ -f pyproject.toml ]; then
              export VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
              echo "Found version in local pyproject.toml: $VERSION"
            else
              export VERSION="latest"
              echo "Warning: pyproject.toml not found, using 'latest' as version"
            fi

            # Verify that the required secrets are set
            if [ -z "${{ secrets.TCR_REGISTRY }}" ] || [ -z "${{ secrets.TCR_USERNAME }}" ] || [ -z "${{ secrets.TCR_PASSWORD }}" ]; then
              echo "Error: One or more TCR secrets (TCR_REGISTRY, TCR_USERNAME, TCR_PASSWORD) are not set."
              echo "Please add them to your GitHub repository secrets before proceeding."
              exit 1
            fi

            # Log in to Tencent Container Registry on the CVM
            echo "${{ secrets.TCR_PASSWORD }}" | docker login ${{ secrets.TCR_REGISTRY }} -u ${{ secrets.TCR_USERNAME }} --password-stdin
            
            # Export environment variables for docker-compose to use
            export TCR_REGISTRY=${{ secrets.TCR_REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export IMAGE_TAG=$VERSION  # 使用语义化版本号而不是 SHA

            # Pull the new image and restart services using docker-compose
            docker-compose pull api
            
            # 显示容器镜像信息
            echo "Available images:"
            docker images | grep ${IMAGE_NAME}
            
            # 停止并移除旧容器
            docker-compose down || true
            
            # 启动新容器
            docker-compose up -d --remove-orphans
            
            # 检查容器状态
            docker-compose ps
            
            # 查看容器日志
            echo "API container logs:"
            docker-compose logs api
            
            # 使用健康检查替代固定等待时间
            echo "Waiting for API service to be healthy..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if docker-compose exec -T api curl -s http://localhost:8000/ > /dev/null; then
                echo "API service is healthy!"
                break
              fi
              echo "Waiting for API to be ready... ($timeout seconds left)"
              # 检查容器是否还在运行
              if ! docker-compose ps | grep api | grep -q "Up"; then
                echo "ERROR: API container is not running! Container logs:"
                docker-compose logs api
                exit 1
              fi
              sleep 5
              timeout=$((timeout-5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "Warning: API service did not become healthy within timeout"
              echo "Container logs:"
              docker-compose logs api
              # 继续执行，因为有些服务可能不提供健康检查端点
            fi
            
            # 运行数据库迁移，添加错误处理
            echo "Running database migrations..."
            if ! docker-compose exec -T api alembic upgrade head; then
              echo "Error: Database migration failed!"
              exit 1
            fi
            
            echo "Deployment completed successfully! Version: $VERSION"
      
      # 添加一个等待步骤，确保服务有足够时间启动
      - name: Wait for service to start
        run: sleep 15
      
      # 检查服务健康状态
      - name: Check service health
        id: health_check
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ env.API_URL }}/health
          method: 'GET'
          timeout: 10000
      
      # 显示健康检查结果
      - name: Display health check result
        run: |
          echo "Health check status: ${{ fromJson(steps.health_check.outputs.response).status }}"
          echo "Database status: ${{ fromJson(steps.health_check.outputs.response).database }}"
          echo "Service version: ${{ fromJson(steps.health_check.outputs.response).version }}"
          
          # 验证服务是否健康
          if [ "${{ fromJson(steps.health_check.outputs.response).status }}" != "healthy" ]; then
            echo "::warning::Service health check returned non-healthy status: ${{ fromJson(steps.health_check.outputs.response).status }}"
          else
            echo "::notice::Service is healthy and running version ${{ fromJson(steps.health_check.outputs.response).version }}" 